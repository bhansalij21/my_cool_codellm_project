#!/usr/bin/env python3
"""
My Cool CodeLLM Project - Main Application
A Python automation project demonstrating data processing, logging, and configuration management capabilities
Generated by codellm for IAG automation
"""

import json
import logging
import os
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import random
import time

# Configure logging
log_level = os.getenv('LOG_LEVEL', 'INFO').upper()
logging.basicConfig(
    level=getattr(logging, log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('my_cool_codellm_project.log')
    ]
)

logger = logging.getLogger(__name__)

class DataProcessor:
    """Advanced data processing class with multiple capabilities"""
    
    def __init__(self):
        self.processed_count = 0
        self.session_start = datetime.now()
        logger.info("DataProcessor initialized")
    
    def generate_sample_data(self, count: int = 10) -> List[Dict[str, Any]]:
        """Generate sample data for processing"""
        categories = ['urgent', 'normal', 'low', 'critical', 'maintenance']
        departments = ['engineering', 'sales', 'marketing', 'hr', 'finance']
        
        sample_data = []
        for i in range(1, count + 1):
            item = {
                "id": i,
                "name": f"Task {i}",
                "value": random.randint(50, 500),
                "category": random.choice(categories),
                "department": random.choice(departments),
                "priority_score": random.uniform(1.0, 10.0),
                "created_date": (datetime.now() - 
                                timedelta(days=random.randint(0, 30))).isoformat(),
                "status": random.choice(['pending', 'in_progress', 'completed', 'blocked'])
            }
            sample_data.append(item)
        
        logger.info(f"Generated {count} sample data items")
        return sample_data
    
    def process_data(self, data: List[Dict[str, Any]]) -> Dict[str, Any]:
        """Process data and return comprehensive analysis"""
        try:
            if not data:
                logger.warning("No data provided for processing")
                return {"status": "warning", "message": "No data to process"}
            
            # Basic statistics
            total_items = len(data)
            total_value = sum(item.get('value', 0) for item in data)
            average_value = total_value / total_items if total_items > 0 else 0
            
            # Category analysis
            categories = [item.get('category', 'unknown') for item in data]
            unique_categories = list(set(categories))
            category_counts = {cat: categories.count(cat) for cat in unique_categories}
            
            # Department analysis
            departments = [item.get('department', 'unknown') for item in data]
            unique_departments = list(set(departments))
            dept_analysis = {}
            for dept in unique_departments:
                dept_items = [item for item in data if item.get('department') == dept]
                dept_analysis[dept] = {
                    'count': len(dept_items),
                    'total_value': sum(item.get('value', 0) for item in dept_items),
                    'avg_priority': sum(item.get('priority_score', 0) for item in dept_items) / len(dept_items)
                }
            
            # Status breakdown
            statuses = [item.get('status', 'unknown') for item in data]
            status_counts = {status: statuses.count(status) for status in set(statuses)}
            
            # Priority analysis
            priority_scores = [item.get('priority_score', 0) for item in data if 'priority_score' in item]
            avg_priority = sum(priority_scores) / len(priority_scores) if priority_scores else 0
            high_priority_items = len([score for score in priority_scores if score > 7.0])
            
            result = {
                "project": "my_cool_codellm_project",
                "status": "success",
                "processing_info": {
                    "session_start": self.session_start.isoformat(),
                    "processing_time": datetime.now().isoformat(),
                    "items_processed": total_items
                },
                "data_summary": {
                    "total_items": total_items,
                    "total_value": total_value,
                    "average_value": round(average_value, 2),
                    "categories": sorted(unique_categories),
                    "departments": sorted(unique_departments)
                },
                "detailed_analysis": {
                    "category_breakdown": category_counts,
                    "department_analysis": dept_analysis,
                    "status_distribution": status_counts,
                    "priority_metrics": {
                        "average_priority": round(avg_priority, 2),
                        "high_priority_count": high_priority_items,
                        "priority_threshold": 7.0
                    }
                },
                "sample_items": data[:3],  # Include first 3 items as sample
                "timestamp": datetime.now().isoformat()
            }
            
            self.processed_count += total_items
            logger.info(f"Successfully processed {total_items} items. Session total: {self.processed_count}")
            return result
            
        except Exception as e:
            logger.error(f"Error processing data: {str(e)}")
            return {
                "project": "my_cool_codellm_project",
                "status": "error",
                "error_message": str(e),
                "timestamp": datetime.now().isoformat()
            }

def format_output(data: Dict[str, Any], format_type: str = "json") -> str:
    """Format output data according to specified format"""
    if format_type.lower() == "text":
        output = []
        output.append("=" * 60)
        output.append("My Cool CodeLLM Project - Processing Results")
        output.append("=" * 60)
        output.append(f"Project: {data.get('project', 'Unknown')}")
        output.append(f"Status: {data.get('status', 'Unknown')}")
        output.append(f"Timestamp: {data.get('timestamp', 'Unknown')}")
        output.append("")
        
        if data.get('status') == 'success':
            summary = data.get('data_summary', {})
            analysis = data.get('detailed_analysis', {})
            
            output.append("📊 DATA SUMMARY:")
            output.append(f"  • Total Items: {summary.get('total_items', 0)}")
            output.append(f"  • Total Value: ${summary.get('total_value', 0):,}")
            output.append(f"  • Average Value: ${summary.get('average_value', 0):,.2f}")
            output.append(f"  • Categories: {', '.join(summary.get('categories', []))}")
            output.append(f"  • Departments: {', '.join(summary.get('departments', []))}")
            output.append("")
            
            if 'priority_metrics' in analysis:
                priority = analysis['priority_metrics']
                output.append("🎯 PRIORITY ANALYSIS:")
                output.append(f"  • Average Priority: {priority.get('average_priority', 0)}/10")
                output.append(f"  • High Priority Items: {priority.get('high_priority_count', 0)}")
                output.append("")
            
            if 'category_breakdown' in analysis:
                output.append("📋 CATEGORY BREAKDOWN:")
                for cat, count in analysis['category_breakdown'].items():
                    output.append(f"  • {cat.title()}: {count} items")
                    
        elif data.get('status') == 'error':
            output.append(f"❌ Error: {data.get('error_message', 'Unknown error')}")
        
        output.append("=" * 60)
        return "\n".join(output)
    else:
        return json.dumps(data, indent=2)

def load_config() -> Dict[str, Any]:
    """Load configuration from environment variables"""
    config = {
        'data_count': int(os.getenv('DATA_COUNT', '10')),
        'output_format': os.getenv('OUTPUT_FORMAT', 'json').lower(),
        'log_level': os.getenv('LOG_LEVEL', 'INFO'),
        'enable_detailed_logging': os.getenv('DETAILED_LOGGING', 'false').lower() == 'true',
        'processing_delay': float(os.getenv('PROCESSING_DELAY', '0.1'))
    }
    
    logger.info(f"Configuration loaded: {config}")
    return config

def main():
    """Main application entry point"""
    logger.info("Starting My Cool CodeLLM Project application")
    
    try:
        # Load configuration
        config = load_config()
        
        # Initialize processor
        processor = DataProcessor()
        
        # Add processing delay for demonstration
        if config['processing_delay'] > 0:
            logger.info(f"Processing delay: {config['processing_delay']} seconds")
            time.sleep(config['processing_delay'])
        
        # Generate or load data
        logger.info(f"Generating {config['data_count']} sample data items")
        data = processor.generate_sample_data(config['data_count'])
        
        # Process data
        logger.info("Processing data...")
        result = processor.process_data(data)
        
        # Format and display results
        formatted_output = format_output(result, config['output_format'])
        print(formatted_output)
        
        # Success/failure reporting
        if result.get('status') == 'success':
            logger.info("Application completed successfully")
            print("\n🎉 My Cool CodeLLM Project execution completed successfully!")
            print(f"✅ Processed {result.get('data_summary', {}).get('total_items', 0)} items")
            print(f"💰 Total value processed: ${result.get('data_summary', {}).get('total_value', 0):,}")
            return 0
        else:
            logger.error("Application completed with errors")
            print(f"\n❌ My Cool CodeLLM Project execution failed: {result.get('error_message', 'Unknown error')}")
            return 1
            
    except Exception as e:
        logger.error(f"Critical application error: {str(e)}")
        print(f"💥 Critical error: {str(e)}")
        return 1

if __name__ == "__main__":
    print("🚀 Starting My Cool CodeLLM Project...")
    print("Generated by codellm for automation and data processing")
    print("-" * 50)
    
    exit_code = main()
    
    print("-" * 50)
    print(f"🏁 Application finished with exit code: {exit_code}")
    sys.exit(exit_code)
